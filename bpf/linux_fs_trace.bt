#!/usr/bin/env bpftrace

BEGIN {
    printf("Tracing filesystem... Hit Ctrl-C to stop.\n");
}

uprobe:/home/jeff/test_io:main
{
    printf("==> main() entered====================================\n");
}

uprobe:/home/jeff/test_io:uflush
{
    printf("==> flush() entered===================================\n");
}

uprobe:/home/jeff/test_io:uwrite
{
    printf("==> write() entered====================================\n");
}

uprobe:/home/jeff/test_io:uread
{
    printf("==> read() entered====================================\n");
}

uprobe:/home/jeff/test_io:ucreate
{
    printf("==> create() entered===================================\n");
}

uprobe:/home/jeff/test_io:uopen
{
    printf("==> open() entered=====================================\n");
}

tracepoint:syscalls:sys_enter_openat
/comm == "test_io" /
{
    printf("[syscall] openat(O_CREAT): filename = %s, mode = 0%o\n", str(args->filename), args->mode);
}

kprobe:do_sys_openat2
/comm == "test_io"/
{
    printf("[kernel] do_sys_openat2(dfd: %d, filename: %s, how: %p)\n", arg0, str(arg1), arg2);
}

kprobe:do_filp_open
/comm == "test_io"/
{
    printf("[kernel] do_filp_open(dfd: %d, pathname: %p, open_flags: %p)\n", arg0, arg1, arg2);
}

kprobe:path_openat
/comm == "test_io"/
{
    printf("[kernel] path_openat(nd: %p, open_flags: %p, file: %p)\n", arg0, arg1, arg2);
}

kprobe:open_last_lookups
/comm == "test_io"/
{
    printf("[kernel] open_last_lookups(nd: %p, file: %p, open_flags: %p)\n", arg0, arg1, arg2);
}

uprobe:/lib/x86_64-linux-gnu/libc.so.6:read
/comm == "test_io"/
{
    printf("[user_space] glibc read(fd = %d, buf = %p, count = %d)\n", arg0, arg1, arg2);
}

tracepoint:syscalls:sys_enter_read
/comm == "test_io"/
{
    printf("[syscall] read(fd: %d, count: %d)\n", args->fd, args->count);
}



tracepoint:syscalls:sys_enter_write
/comm == "test_io"/
{
    printf("[syscall] write(fd: %d, count: %d)\n", args->fd, args->count);
}

kprobe:vfs_create
/comm == "test_io"/
{
    printf("[vfs] vfs_create(dir: %p, dentry: %p, mode: 0x%x, excl: %d)\n", arg0, arg1, arg2, arg3);
}

kprobe:vfs_read
/comm == "test_io"/
{
    printf("[vfs] vfs_read(file: %p, buf: %p, count: %lu)\n", arg0, arg1, arg2);
}

kprobe:vfs_write
/comm == "test_io"/
{
    printf("[vfs] vfs_write(file: %p, count: %lu)\n", arg0, arg2);
}

kprobe:ext4_create
/comm == "test_io"/
{
    printf("[ext4] ext4_create(dir: %p, dentry: %p, mode: 0x%x, excl: %d)\n", arg0, arg1, arg2, arg3);
}

kprobe:ext4_file_read_iter
/comm == "test_io"/
{
    printf("[ext4] ext4_file_read_iter(file: %p, iter: %p)\n", arg0, arg1);
}

kprobe:ext4_file_write_iter
/comm == "test_io"/
{
    printf("[ext4] ext4_file_write_iter()\n");
}

kprobe:filemap_get_pages
/comm == "test_io"/
{
    printf("[page cache] filemap_get_pages\n");
}

kprobe:filemap_get_read_batch
/comm == "test_io"/
{
    printf("[page cache] filemap_get_read_batch\n");
}

kprobe:page_cache_sync_ra
/comm == "test_io"/
{
    printf("[page cache] page_cache_sync_ra\n");
}

kprobe:force_page_cache_ra
/comm == "test_io"/
{
    printf("[page cache] force_page_cache_ra\n");
}

kprobe:page_cache_ra_unbounded
/comm == "test_io"/
{
    printf("[page cache] page_cache_ra_unbounded\n");
}

kprobe:read_pages
/comm == "test_io"/
{
    printf("[page cache] read_pages\n");
}

kprobe:filemap_add_folio
/comm == "test_io"/
{
    printf("[page cache] filemap_add_folio\n");
}

kprobe:__filemap_add_folio
/comm == "test_io"/
{
    printf("[page cache] __filemap_add_folio\n");
}

kprobe:ext4_read_folio
/comm == "test_io"/
{
    printf("[page cache] ext4_read_folio\n");
}

kprobe:do_read_cache_folio
/comm == "test_io"/
{
    printf("[page cache] do_read_cache_folio\n");
}

kprobe:filemap_update_page
/comm == "test_io"/
{
    printf("[page cache] filemap_update_page\n");
}

kprobe:filemap_read_folio
/comm == "test_io"/
{
    printf("[page cache] filemap_read_folio\n");
}

kprobe:filemap_read
/comm == "test_io"/
{
    printf("[page cache] filemap_read(file: %p, iter: %p)\n", arg0, arg1);
}

kprobe:mpage_readahead
/comm == "test_io"/
{
    printf("[page cache miss] mpage_readahead(mapping: %p, ra: %p, filp: %p, page: %p, nr: %lu)\n",
            arg0, arg1, arg2, arg3, arg4);
}

kprobe:block_write_begin
/comm == "test_io"/
{
    printf("[cache] block_write_begin()\n");
}

kprobe:ext4_writepages
/comm == "test_io"/
{
    printf("[ext4] ext4_writepages (flush dirty pages)\n");
}

kprobe:submit_bio
/comm == "test_io"/
{
    // bio->bi_opf 位于 bio 结构体偏移位置随内核版本可能不同
    // 简化处理，不解码 opf，只输出 bio 地址
    printf("[blk] submit_bio(bio: %p)\n", arg0);
}

kprobe:blk_mq_submit_bio
/comm == "test_io"/
{
    printf("[blk] blk_mq_submit_bio()\n");
}

kprobe:blk_mq_dispatch_rq_list
/comm == "test_io" /
{
     printf("[blk] blk_mq_dispatch_rq_list()\n");
}

kprobe:blk_mq_run_hw_queue
/comm == "test_io" /
{
     printf("[blk] blk_mq_run_hw_queue(queue: %p)\n", arg0); 
}

tracepoint:block:block_rq_complete
/comm == "test_io" /
{
    printf("[block] complete: dev %d:%d, sector: %llu, len: %u, rwbs: %s\n",
        args->dev >> 20, args->dev & ((1 << 20) - 1),
        args->sector, args->nr_sector, args->rwbs);
}

tracepoint:block:block_rq_issue
/comm == "test_io" /
{
    printf("[block] issue: dev %d:%d, sector: %llu, len: %u, rwbs: %s\n",
        args->dev >> 20, args->dev & ((1 << 20) - 1),
        args->sector, args->nr_sector, args->rwbs);
}

kprobe:generic_file_read_iter
/comm == "test_io"/
{
    printf("[vfs] generic_file_read_iter(iocb: %p, iter: %p)\n", arg0, arg1);
}

kprobe:generic_perform_write
/comm == "test_io"/
{
    printf("[vfs] generic_perform_write(file: %p, iov_iter: %p, pos: %llu)\n",
           arg0, arg1, arg2);
}

kprobe:generic_file_write_iter
/comm == "test_io"/
{
    printf("[vfs] generic_file_write_iter(iocb: %p, iov_iter: %p)\n", arg0, arg1);
}

tracepoint:syscalls:sys_enter_fsync
/comm == "test_io"/
{
    printf("[syscall] fsync(fd: %d)\n", args->fd);
}

kprobe:vfs_fsync
/comm == "test_io"/
{
    printf("[vfs] vfs_fsync(file: %p)\n", arg0);
}

kprobe:ext4_sync_file
/comm == "test_io"/
{
    printf("[ext4] ext4_sync_file(file: %p, datasync: %d)\n", arg0, arg1);
}
